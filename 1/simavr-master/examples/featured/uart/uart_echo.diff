--- atmega88_uart_echo.c	2015-04-18 00:00:47.403063198 +0200
+++ atmega2560_uart_echo.c	2015-04-18 17:58:42.355664182 +0200
@@ -13,15 +13,17 @@
 #include <avr/interrupt.h>
 #include <avr/eeprom.h>
 #include <avr/sleep.h>
+#include <util/delay.h>
 
 /*
  * This demonstrate how to use the avr_mcu_section.h file
  * The macro adds a section to the ELF file with useful information for the simulator
  */
 #include "avr_mcu_section.h"
-AVR_MCU(F_CPU, "atmega88");
+AVR_MCU(F_CPU, "atmega2560");
 // tell simavr to listen to commands written in this (unused) register
 AVR_MCU_SIMAVR_COMMAND(&GPIOR0);
+AVR_MCU_SIMAVR_CONSOLE(&GPIOR1);
 
 /*
  * This small section tells simavr to generate a VCD trace dump with changes to these registers.
@@ -29,17 +31,38 @@
  * the UDRE0 bit being set, then cleared
  */
 const struct avr_mmcu_vcd_trace_t _mytrace[]  _MMCU_ = {
-  { AVR_MCU_VCD_SYMBOL("UDR0"), .what = (void*)&UDR0, },
-  { AVR_MCU_VCD_SYMBOL("UDRE0"), .mask = (1 << UDRE0), .what = (void*)&UCSR0A, },
+  { AVR_MCU_VCD_SYMBOL("UDR3"), .what = (void*)&UDR3, },
+  { AVR_MCU_VCD_SYMBOL("UDRE3"), .mask = (1 << UDRE3), .what = (void*)&UCSR3A, },
   { AVR_MCU_VCD_SYMBOL("GPIOR1"), .what = (void*)&GPIOR1, },
 };
 
+volatile uint8_t cnt = 0;
+volatile uint8_t done = 0;
+
 static int uart_putchar(char c, FILE *stream)
 {
+  uint8_t startcnt;
   if (c == '\n')
     uart_putchar('\r', stream);
-  loop_until_bit_is_set(UCSR0A, UDRE0);
-  UDR0 = c;
+  loop_until_bit_is_set(UCSR3A, UDRE3);
+
+  startcnt = cnt;
+  UDR3 = c;
+  // _delay_us(100);
+
+  // Wait until we have received the character back
+  while(!done && cnt == startcnt)
+    {
+      UDR1 = 'a';
+      UDR1 = '\n';
+      sleep_cpu();
+    }
+
+  UDR1 = 'b';
+  UDR1 = '\n';
+
+  _delay_us(1000);
+
   return 0;
 }
 
@@ -47,49 +70,52 @@
 
 volatile uint8_t bindex = 0;
 uint8_t buffer[80];
-volatile uint8_t done = 0;
 
-ISR(USART_RX_vect)
+ISR(USART3_RX_vect)
 {
-  uint8_t b = UDR0;
+  UDR1 = 'c';
+  UDR1 = '\n';
+
+  uint8_t b = UDR3;
   GPIOR1 = b;   // for the trace file
   buffer[bindex++] = b;
   buffer[bindex] = 0;
+  cnt++;
   if (b == '\n')
     done++;
+  // sleep_cpu();
 }
 
 int main()
 {
-  // this tell simavr to put the UART in loopback mode
-  GPIOR0 = SIMAVR_CMD_UART_LOOPBACK;
-
   stdout = &mystdout;
 
-  UCSR0C |= (3 << UCSZ00);   // 8 bits
+  UCSR3C = (3 << UCSZ30);   // 8 bits
   // see http://www.nongnu.org/avr-libc/user-manual/group__util__setbaud.html
 #define BAUD 38400
 #include <util/setbaud.h>
-  UBRR0H = UBRRH_VALUE;
-  UBRR0L = UBRRL_VALUE;
+  UBRR3H = UBRRH_VALUE;
+  UBRR3L = UBRRL_VALUE;
 #if USE_2X
-  UCSR0A |= (1 << U2X0);
+  UCSR3A |= (1 << U2X3);
 #else
-  UCSR0A &= ~(1 << U2X0);
+  UCSR3A &= ~(1 << U2X3);
 #endif
 
   // enable receiver & transmitter
-  UCSR0B |= (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0);
+  UCSR3B |= (1 << RXCIE3) | (1 << RXEN3) | (1 << TXEN3);
 
   // this tells simavr to start the trace
   GPIOR0 = SIMAVR_CMD_VCD_START_TRACE;
   sei();
   printf("Hey there, this should be received back\n");
+  loop_until_bit_is_set(UCSR3A, UDRE3);
 
   while (!done)
     sleep_cpu();
 
   cli();
+
   printf("Received: %s", buffer);
 
   // this quits the simulator, since interupts are off
